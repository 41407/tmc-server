= javascript_include_tag "src-min/ace.js"
= javascript_include_tag "src-min/mode-php.js", "src-min/theme-textmate.js", "src-min/keybinding-vim.js", "src-min/mode-yaml.js", "src-min/theme-merbivore_soft.js", "src-min/theme-ambiance.js", "src-min/mode-objectivec.js", "src-min/mode-textile.js", "src-min/mode-rhtml.js", "src-min/mode-c_cpp.js", "src-min/mode-velocity.js", "src-min/theme-tomorrow_night.js", "src-min/mode-rdoc.js", "src-min/mode-livescript.js", "src-min/mode-markdown.js", "src-min/theme-crimson_editor.js", "src-min/worker-xquery.js", "src-min/mode-jsp.js", "src-min/mode-json.js", "src-min/theme-tomorrow_night_bright.js", "src-min/mode-mushcode.js", "src-min/mode-luapage.js", "src-min/mode-ftl.js", "src-min/mode-lucene.js", "src-min/mode-liquid.js", "src-min/mode-tex.js", "src-min/mode-toml.js", "src-min/theme-tomorrow_night_blue.js", "src-min/mode-pgsql.js", "src-min/theme-clouds_midnight.js", "src-min/mode-django.js", "src-min/mode-scala.js", "src-min/theme-xcode.js", "src-min/ext-emmet.js", "src-min/mode-java.js", "src-min/mode-html.js", "src-min/worker-css.js", "src-min/worker-json.js", "src-min/mode-makefile.js", "src-min/mode-scad.js", "src-min/theme-mono_industrial.js", "src-min/theme-kr.js", "src-min/mode-lua.js", "src-min/mode-sass.js", "src-min/mode-ocaml.js", "src-min/theme-tomorrow_night_eighties.js", "src-min/mode-abap.js", "src-min/theme-idle_fingers.js", "src-min/theme-clouds.js", "src-min/mode-golang.js", "src-min/theme-github.js", "src-min/theme-twilight.js", "src-min/ext-searchbox.js", "src-min/ext-spellcheck.js", "src-min/theme-dreamweaver.js", "src-min/ext-whitespace.js", "src-min/theme-tomorrow.js", "src-min/mode-perl.js", "src-min/mode-scss.js", "src-min/mode-mushcode_high_rules.js", "src-min/theme-dawn.js", "src-min/theme-merbivore.js", "src-min/mode-haxe.js", "src-min/mode-css.js", "src-min/mode-python.js", "src-min/worker-coffee.js", "src-min/mode-dot.js", "src-min/ext-static_highlight.js", "src-min/mode-glsl.js", "src-min/mode-lsl.js", "src-min/mode-javascript.js", "src-min/mode-r.js", "src-min/mode-haml.js", "src-min/theme-terminal.js", "src-min/ext-elastic_tabstops_lite.js", "src-min/mode-logiql.js", "src-min/mode-typescript.js", "src-min/theme-chrome.js", "src-min/theme-solarized_light.js", "src-min/mode-dart.js", "src-min/mode-diff.js", "src-min/mode-csharp.js", "src-min/mode-coffee.js", "src-min/mode-tcl.js", "src-min/worker-php.js", "src-min/mode-c9search.js", "src-min/mode-jade.js", "src-min/mode-vbscript.js", "src-min/keybinding-emacs.js", "src-min/mode-less.js", "src-min/theme-eclipse.js", "src-min/mode-xml.js", "src-min/mode-stylus.js", "src-min/mode-latex.js", "src-min/worker-javascript.js", "src-min/mode-curly.js", "src-min/mode-jsx.js", "src-min/mode-svg.js", "src-min/mode-ruby.js", "src-min/mode-xquery.js", "src-min/worker-lua.js", "src-min/theme-monokai.js", "src-min/mode-coldfusion.js", "src-min/mode-lisp.js", "src-min/mode-pascal.js", "src-min/mode-sh.js", "src-min/theme-solarized_dark.js", "src-min/theme-pastel_on_dark.js", "src-min/mode-tmsnippet.js", "src-min/ext-textarea.js", "src-min/mode-text.js", "src-min/theme-chaos.js", "src-min/mode-powershell.js", "src-min/mode-groovy.js", "src-min/mode-clojure.js", "src-min/mode-asciidoc.js", "src-min/theme-vibrant_ink.js", "src-min/theme-cobalt.js", "src-min/mode-sql.js", "src-min/mode-scheme.js"
= javascript_include_tag "underscore-min.js"
= javascript_include_tag "backbone-min.js"
= javascript_include_tag "mustache.js"

:javascript
  var tmcPastebin = {
    views: {},
    models: {}
  };

  // Models
  tmcPastebin.models.Comment = Backbone.Model.extend({});
  tmcPastebin.models.Comments = Backbone.Collection.extend({
    model: tmcPastebin.models.Comment,
    url: ((("" + window.location).charAt(window.location.length - 1) == '/') ? window.location : (window.location + "/")) + "comments.json?api_version=5"
  });

  // Views
  tmcPastebin.views.EditorView = Backbone.View.extend({
    el: "#left-pane",
    initialize: function() {
      this.editor = ace.edit("editor");
      this.chosenIndex = 0;
      this.render();

      // Create tabs
      for (var i = 0; i < tmcPastebin.models.files.length; i++) {
        var path = tmcPastebin.models.files[i].path;
        $("#tabs").append($("<li data-id=" + i + ">" + path + "</li>"));
      }
    },
    render: function() {
      this.editor.getSession().setMode("ace/mode/java");
      this.editor.getSession().setValue(tmcPastebin.models.files[this.chosenIndex].contents);
    },
    events: {
      "click li": "changeFile"
    },
    changeFile: function(e) {
      this.chosenIndex = parseInt($(e.target).data("id"));
      this.render();
    }
  });

  tmcPastebin.views.TestView = Backbone.View.extend({
    el: "#test-pane",
    initialize: function() {
      this.chosenIndex = null;
      this.render();
    },
    render: function () {
      this.renderTestInfo();
      this.renderTestList();
    },
    renderTestInfo: function() {
      if (this.chosenIndex != null) {
        var model = tmcPastebin.models.tests[this.chosenIndex];
        var details = (model.exception == null || model.exception.length == 0) ? model.backtrace : model.exception;
        $("#test-info").html(details);
      } else {
        $("#test-info").html("");
      }
    },
    renderTestList: function() {
      $("div#test-list ul").html(""); // Clearing test-list so we don't get duplicates
      for (var field in tmcPastebin.models.tests) {
        var statusMsg = (tmcPastebin.models.tests[field].successful) ? "Passed" : "Failed";
        $("div#test-list ul").append($("<li data-id=\"" + field + "\">" + tmcPastebin.models.tests[field].test_case_name + " : "  + statusMsg + "</li>"));
      }
    },
    events: {
      "click li": "showDetails"
    },
    showDetails: function(e) {
      var clicked = parseInt($(e.target).data("id"));
      this.chosenIndex = (clicked == this.chosenIndex) ? null : clicked;
      this.render();
    }
  });

  tmcPastebin.views.CommentsView = Backbone.View.extend({
    el: "#comments-pane",
    initialize: function() {
      this.comments = new tmcPastebin.models.Comments();
      this.reload();
    },
    render: function() {
      var html = Mustache.render($("#comments-list-template").html(), {comments: this.comments.toJSON()});
      $("#comments-pane #comments").html(html);
    },
    events: {
      "click input:submit": "submitComment"
    },
    reload: function() {
      var context = this;
      this.comments.fetch({success: function() {
        context.render();
      }});
    },
    submitComment: function(e) {
      e.preventDefault();
      var msg = $("#message").val();
      this.comments.create({comment: msg});
      $("#message").val("");
      this.reload();
    }
  });

:javascript
  $(document).ready(function() {
    tmcPastebin.models.files = JSON.parse($("#files-template").html());
    tmcPastebin.models.tests = JSON.parse($("#tests-template").html());
    var editorView = new tmcPastebin.views.EditorView();
    var commentsView = new tmcPastebin.views.CommentsView();
    var testView = new tmcPastebin.views.TestView();

    // Event delegation
    commentsView.on("reload", commentsView.reload);

    // Refreshing comments
    setInterval(function(){commentsView.trigger("reload")}, 1000);
  });

-#.solution-files
-#  - for file in @files
-#    %h2= file.path
-#    :ruby
-#      brush = case File.extname(file.path)
-#        when '.txt' then 'plain'
-#        when '' then 'plain'
-#        else File.extname(file.path)[1..-1]
-#      end
-#    %pre.brush:.brush{:class => "#{brush}"} #{file.contents}

#left-pane
  %ul{id: "tabs"}
  #editor{style: "height: 300px; width: 500px;"}

#right-pane
  #comments-pane
    #comments
    %input{type: "text", id: "message"}
    %input{type: "submit"}
  #test-pane
    #test-info
    #test-list
      %ul

- # Templates
%script{id: "files-template", type: "text/plain"}
  = raw(@files)
%script{id: "tests-template", type: "text/plain"}
  = raw(@tests)

%script{id: "comments-list-template", type: "text/html"}
  :plain
    {{#comments}}
      <div class="comment">
        {{user.login}}: {{comment}}
      </div>
     {{/comments}}