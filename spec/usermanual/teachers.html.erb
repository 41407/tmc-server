<!DOCTYPE html>
<!-- NOTE: doc/usermanual/pages is autogenerated from spec/usermanual -->
<html>
<head>
  <%
  #TODO: get rid of header/layout duplication
  %>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>TMC webapp user manual - teacher</title>

  <link rel="stylesheet" type="text/css" href="../css/usermanual.css" />
  <link rel="stylesheet" type="text/css" href="../lib/shjs/sh_style.css" />

  <script type="text/javascript" src="../lib/jquery-1.7.1.min.js"></script>
  <script type="text/javascript" src="../lib/shjs/sh_main.min.js"></script>
  <script type="text/javascript" src="../lib/shjs/sh_java.min.js"></script>
  <script type="text/javascript" src="../js/toc.js"></script>

  <script type="text/javascript">
    $(document).ready(function() {
      sh_highlightDocument();
      $('#toc').prepend('<h2>Contents</h2>');
      makeToc($('#toc'));
    });
  </script>
</head>
<body>

<%
require 'cgi' # for escapeHTML
%>

  <%
    FactoryGirl.create :user, login: 'teacher', password: 'teacher'
    FactoryGirl.create :user, login: 'professor', password: 'professor'
    FactoryGirl.create :admin, login: 'admin', password: 'admin'
    FactoryGirl.create :accepted_organization, name: 'Some organization', information: 'Some information'
    FactoryGirl.create :course_template, name: 'prog101', title: 'Programming 101'
    FactoryGirl.create :course_template, name: 'prog102', title: 'Programming 102'
    FactoryGirl.create :course_template, name: 'skynet', title: 'Skynet laboratory'
  %>

  <h1>Teacher Manual</h1>

  <div id="toc"></div>

  <p>
    Teacher is a user that has a teachership status to one or more organizations.
    Their main responsibility is to manage their organization, along with regular
    duties related to teaching their students.
  </p>

  <h2>Requesting organization</h2>

  <p>
    TMC webapp is divided to several organizations, which have their own staff and courses. To start using TMC as
    a teacher, you must either be added to some established organization or request your own.
  </p>

  <p>
    When logged in as a user (sign up first if you haven't already), in the front page, click 'Request a new organization'.
  </p>

<%
  visit '/'
  fill_in 'session_login', with: 'teacher'
  fill_in 'session_password', with: 'teacher'
  click_on 'Sign in'
  highlight 'a:contains("Request a new organization")'
%>
<%= screenshot %>
<%
  click_on 'Request a new organization'
  fill_in 'organization_name', with: 'Helsingin yliopisto'
  fill_in 'organization_information', with: 'University life'
  fill_in 'organization_slug', with: 'hy'
%>
<%= screenshot %>

  <p>
    You will then be presented with a form with following fields:
    <ul>
      <li><b>Name</b> of the organization that will be seen in the app</li>
      <li><b>Description</b> about your organization, seen in this organization's page</li>
      <li>"<b>Slug</b>", a short word that will be part of your organization's url. You will have an opportunity to preview organization's url</li>
    </ul>
  </p>

<%
  click_on 'Request organization'
  expect(page).to have_content("Organization was successfully requested.")
%>
<%= screenshot %>

  <p>
    After sending the request, you will have to wait for TMC's administrators to accept your request. While request is pending,
    you may see the organization's page, but you can't do much else with it.
  </p>

<%
  visit '/'
  expect(page).not_to have_content 'Helsingin yliopisto'
%>
<%= screenshot %>

  <p>
    After your organization is accepted, you will be able to see it in the organization listing at the front page.
  </p>

<%
  click_on 'Sign out'
  fill_in 'session_login', with: 'admin'
  fill_in 'session_password', with: 'admin'
  click_on 'Sign in'

  click_on 'Show'
  click_on 'Accept'
  expect(page).to have_content 'Organization request was successfully accepted.'

  visit '/'
  click_on 'Sign out'
  fill_in 'session_login', with: 'teacher'
  fill_in 'session_password', with: 'teacher'
  click_on 'Sign in'

  highlight 'a:contains("Helsingin yliopisto")'
%>
<%= screenshot %>

  <h2>Adding new teachers</h2>

  <p>
    From your organization's front page, you can list all the teachers in the organization.
  </p>

<%
  click_on 'Helsingin yliopisto'
  highlight 'a:contains("Show teachers in this organization")'
%>
<%= screenshot %>

<%
   click_on 'Show teachers in this organization'
   highlight 'a:contains("Add a new teacher")'
%>
<%= screenshot %>

  <p>
    When you're a teacher in some organization, you may add new teachers. Click 'Add a new teacher'.
  </p>

<%
   click_on 'Add a new teacher'
   fill_in 'username', with: 'professor'
%>
<%= screenshot %>

  <p>
    To recruit a new teacher, you will have to know the teacher's username. The page form will not list available usernames.
    Type the username then click 'Add a new teacher'.
  </p>

<%
   click_on 'Add a new teacher'
%>
<%= screenshot %>

  <p>
    Added teacher will now have the same access rights for the organization as you have.
  </p>

  <h2>Creating a course</h2>

  <p>
    Simplest way to create a course is to copy it from a template. You will be able to manage submission deadlines,
    exercise unlock dates etc. You will not, however, be able to edit the exercise source code.
  </p>

  <p>
    From organization's front page, click 'Create new course from template'
  </p>

<%
  visit '/org/hy'
  highlight 'a:contains("Create New Course from template")'
%>
<%= screenshot %>

<%
  click_on 'Create New Course from template'
%>
<%= screenshot %>

  <p>
    You will see a list of all the course templates TMC has to offer. Click 'Create course' button on the template that you want.
  </p>

<%
  first(:link, 'Create course').click
%>
<%= screenshot %>

  <p>
    On the following form the fields will be prefilled with template defaults. You may change these fields to suit your needs.
    <ul>
      <li>Courses are shown by <b>Name</b> in IDE plugins (such as NetBeans). Name can't contain whitespaces.</li>
      <li><b>Title</b> is a prettier version of the name that may contain whitespaces, and is shown on webapp pages.</li>
      <li><b>Description</b> is a short piece of text to show when browsing this particular course.</li>
      <li>
        <b>Material url</b> takes user to the online resource that educates and helps the course participant with solving
        the course exercises.
      </li>
    </ul>
  </p>

  <p>
    Click 'Add Course'. You might want to wait a while as course will fill itself with exercises downloaded via Source url.
  </p>

<%
  click_on 'Add Course'
  highlight 'a:contains("View status page")'
%>
<%= screenshot %>

  <p>
    Course should now be available for students to submit their solutions to exercises. TMC will show a help page to get you started
    with teaching the course. Click 'view status page' to return to course's front page.
  </p>

<%
   click_on 'View status page'
%>
<%= screenshot %>

  <p>
    Here you may see submissions sent to any exercises in this course, view model solutions, make code reviews etc. You may also access
    course page from organization's page.
  </p>

<%
   visit '/org/hy'
   highlight 'a:contains("Programming 101")'
%>
<%= screenshot %>

  <p>
    If you're so inclined, you may create your own course without a template. This <a href="customcourse.html">guide</a>
    may prove useful to you in this case.
  </p>

  <h2>Disabling course</h2>

  <p>
    Created course may be disabled so that it won't accept submissions. You might want to do this if you're not satisified
    with your course and wish to start a new one, if you want to configure your course without worrying about students using your course,
    or if you want to force students to take a vacation. Disabled courses can be enabled at a later time.
  </p>

<%
   visit '/org/hy/courses/1'
   highlight 'a:contains("Disable Course")'
%>
<%= screenshot %>

  <p>Simply click 'Disable Course' link to disable course</p>

<%
  click_on 'Disable Course'
  highlight 'a:contains("Enable Course")'
%>
<%= screenshot %>

  <p>Click 'Enable Course' link to enable it again</p>

<%
   click_on 'Enable Course'
%>

  <h2>Course progression</h2>

  <p>
    To control course progression, each exercise and exercise group may be configured with deadlines and unlock dates.
  </p>

  <h3>Deadlines</h3>

  <p>
    From the course's front page, click the 'Manage deadlines' button.
  </p>

<%
   visit '/org/hy/courses/1'
   highlight 'a:contains("Manage deadlines")'
%>
<%= screenshot %>

<%
   course = Course.find_by id: 1
   course.exercise_group_by_name('').hard_group_deadline = ['01.01.2011'].to_json
   click_on 'Manage deadlines'
%>
<%= screenshot %>

  <p>
    Distinction is made between hard and soft deadlines. When soft deadline is met, nothing relevant to TMC webapp happens.
    Soft deadlines are meant to pressure students with smaller reprecussions.
    When hard deadline is met, exercise will stop accepting submissions.
  </p>

  <p>
    Common deadlines are configured by date or date-time. TMC understands multiple formats, for example:
    <ul>
      <li>20.1.2000</li>
      <li>30.12.2000 20:00</li>
      <li>2000-1-20</li>
      <li>2000-12-30 20:00</li>
      <li>2000-12-30 8:00 PM</li>
    </ul>
  </p>

  <p>
    Unlock-based deadlines will calculate unique deadlines for each student based on the time they unlocked the exercise.
    For example, to give students 2 weeks to complete an exercise after it becomes available, set the deadline to
    <code>unlock + 2 weeks</code>. Other possible values for unlock-based deadlines are
    <code>unlock + &lt;N&gt; [minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s]]</code>.
    To edit unlock-based deadlines, advanced options must be enabled by clicking the button in the top right corner of the page.
  </p>

  <p>
    By default, the form is set to edit deadlines for all exercises in an exercise group at once. Exercises that the deadlines apply to
    are listed on the 'Exercises' column. If you want to edit deadlines for individual exercises, click 'Show single exercises'.
    This will expand the form to show all exercises in the group.
  </p>

<%
  highlight 'a:contains("Show single exercises")'
%>

<%= screenshot %>
<% click_on 'Show single exercises' %>
<%= screenshot %>

<%
   i = 1
   course.exercises.each do |e|
     e.deadline_spec = ["#{i}.1.2000"].to_json
     i += 1
     e.save!
   end
   visit '/org/hy/courses/1/manage_deadlines'

   disabled_text = find_field('empty_group_hard_static', disabled: true).value
%>

  <p>
    If the exercises in a group have differing deadlines, the group deadline input fields will be disabled and show
    '<%= disabled_text %>'.
  </p>

<%= screenshot %>

  <p>
    If you want to edit the deadlines for the whole group again, you need to change the single deadlines so they all
    match within the group, or you can reset them by clicking 'Clear single deadlines'.
  </p>

<%
   click_on 'Show single exercises'
   highlight 'a:contains("Clear single deadlines")'
%>

<%= screenshot %>

  <p>
    If both date-based and unlock-based deadlines are enabled for the same exercise, the one which expires first wil be used.
  </p>

  <p>
    After creating a course from template, the deadlines may already be defined depending on the course template configuration.
  </p>

  <h3>Unlock dates</h3>

  <p>
    If exercise or exercise group has an unlock date attached to it and it has not passed yet, exercise will not accept submissions.
    Unlock dates can be set by clicking 'Manage unlock dates' in the course page.
  </p>

<%
   course.exercise_group_by_name('').hard_group_deadline = [''].to_json
   visit '/org/hy/courses/1'
   highlight 'a:contains("Manage unlock dates")'
%>
<%= screenshot %>

  <p>
    Unlock dates may be set for each exercise group separately.
  </p>

<%
   course.exercise_group_by_name('').group_unlock_conditions = ['01-01-2011'].to_json
   UncomputedUnlock.create_all_for_course_eager(course)
   click_on 'Manage unlock dates'
%>
<%= screenshot %>

</body>
</html>
