<%
require 'cgi' # for escapeHTML
%>
<!DOCTYPE html>
<!-- NOTE: doc/usermanual/pages is autogenerated from spec/usermanual -->
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>How to create exercises with TMC</title>
  
  <link rel="stylesheet" type="text/css" href="../css/usermanual.css" />
  <link rel="stylesheet" type="text/css" href="../lib/shjs/sh_style.css" />
  
  <script type="text/javascript" src="../lib/shjs/sh_main.min.js"></script>
  <script type="text/javascript" src="../lib/shjs/sh_java.min.js"></script>
</head>
<body onload="sh_highlightDocument();">
  
  <%
    Factory.create(:admin, :login => 'admin', :password => 'admin')
  %>
  
  <h1>How to administer exercises with TMC</h1>
  
  <p>
    TMC exercises are stored in a <a href="http://git-scm.com/">git</a>
    repository. Although we'll cover the basics here, we highly recommend
    you learn to use git properly, especially if you collaborate with
    other course instructors. We chose it because it's a supremely useful tool
    that saves time and frustration even when working alone.
  </p>
  
  <h2>Creating a course</h2>
  
  <p>First let's log in as an administrator.</p>
  
  <%
    visit '/'
    fill_in 'Login', :with => 'admin'
    fill_in 'Password', :with => 'admin'
  %>
  <% highlight '#session_submit' %>
  <%= screenshot %>
  <%
    click_on 'Sign in'
  %>
  
  <p>
    Now we can create a new course.
  </p>
  
  <% highlight('a:contains("Create New Course")') %>
  <%= screenshot %>
  <% click_on 'Create New Course' %>
  
  <% course_name = 'programming101' %>
  <p>
    We'll name our course "<%= course_name %>", and we'll also have to give the address
    of the git repository where we'll store the exercises.
  </p>
  
  <%
    fill_in 'course_name', :with => course_name
    highlight '#course_name'
    
    repo_path = ENV['TMC_USERMANUAL_REPO_PATH'] || (ENV['HOME'] + '/tmc-example-repo')
    FileUtils.rm_rf(repo_path)
    FileUtils.mkdir_p(repo_path)
    system(mk_command('git', 'init', '--bare', '-q', repo_path))
    repo_url = 'file://' + repo_path
    
    fill_in 'course_remote_repo_url', :with => repo_url
    highlight '#course_remote_repo_url'
  %>
  
  <p>
    You can either give a remote repository address or leave the address blank to have
    the TMC server create a local repository. We highly recommend using a remote repository,
    since a local one requires setup of user git accounts on the TMC server.
    <a href="https://github.com/">GitHub</a> is an excellent place to get free Git hosting.
    If you have an existing repository, say on GitHub, enter its <em>read-only</em> URL as
    the remote repo. In this example we'll pretend the remote repo is at
    <code><%= CGI::escapeHTML(repo_url) %></code>.
  </p>
  
  <%= screenshot %>
  <%
    click_on 'Add Course'
    course = Course.first
  %>
  
  <p>
    The course was created successfully.
  </p>
  
  <%= screenshot %>
  
  <% workdir = 'tmc-exercises/prog101' %>
  <p>
    Now we'll need to add some exercises.
    To do that, we'll need to clone the remote repository, make our changes and push them back,
    as usual with git.
    Open the command line and go to the directory you'd like to work in.
    We'll clone to <code><%= workdir %></code> in this example.
  </p>
  
  <%
    shell_session = DocGen::ShellSession.new
  %>
  
  <%
    course_template_homepage = 'https://github.com/testmycode/tmc-course-template_helsinki-university'
    course_template_repo = 'git://github.com/testmycode/tmc-course-template_helsinki-university.git'
  %>
  
  <h3>Starting from a template</h3>
  <p>
    If we have a <a href="<%= course_template_homepage %>">course template</a> in another repo,
    we should clone that instead. We'll name the template repo as the 'template' remote
    and add the actual course repo as 'origin'. We'll then push everything we got from
    the template to 'origin'.
  </p>
  
  <p>
    The <code>-u</code> flag makes the master branch <em>track</em>
    the master branch in 'origin'. This means that whenever we commit to master and push,
    it'll push to 'origin' by default (and not to 'template').
  </p>
  
  <%=
    shell_session.example do |sh|
      sh.run "git clone --origin template #{course_template_repo} #{workdir}"
      sh.blank_line
      
      sh.run "cd #{workdir}"
      shell_session.working_dir = workdir
      sh.run "ls"
        
      sh.blank_line
      sh.run "git remote add origin #{course.bare_url}"
      sh.run "git push -u origin master"
    end
  %>
  
  <p>
    The template contains some example exercises. We'll delete those since we want to create our own.
  </p>
  
  <%
    template_examples = ["viikkoX"]
    template_examples.each {|dir| File.should exist(workdir + "/" + dir) }
  %>
  <%=
    shell_session.example do |sh|
      sh.run "rm -Rf #{template_examples.join(' ')}"
      sh.run "git add -A"
      sh.run "git commit -m \"Removed examples that came with the template.\""
      sh.run "git push"
      sh.run "ls"
    end
  %>
  
  <p>
    An exercise is just a NetBeans project with some unit tests and
    at least the JUnit and tmc-javalib libraries included.
    The template course has a template exercise in
    <code>private/template_project</code>.
  </p>
  
  <%=
    File.should be_directory(shell_session.working_dir + '/private/template_project')
    shell_session.example do |sh|
      sh.run "cd private/template_project; find ."
    end
  %>
  
  <p>
    It's not advised to copy the template directly but instead use <code>scripts/create-project</code>
    as it automatically also renames the exercise in all relevant NetBeans settings files.
  </p>
  
  <%=
    shell_session.example do |sh|
      sh.run "scripts/create-project factorial"
      sh.run "ls"
    end
  %>
  <% File.should be_directory("#{workdir}/factorial") %>
  <% File.should be_directory("#{workdir}/factorial/src") %>
  <% File.should be_directory("#{workdir}/factorial/test") %>
  <% File.should be_directory("#{workdir}/factorial/nbproject") %>
  
  <h3>Writing the exercise</h3>
  
  <p>
    Now that we have a blank project, we can finally write our test cases and stub class. Open the project in NetBeans and write the following files.
  </p>
  
  <%
    spec_dir = "#{Rails.root}/spec/usermanual"
    code = {}
    code['Factorial.java'] = File.read("#{spec_dir}/Factorial.java")
    code['FactorialTest.java'] = File.read("#{spec_dir}/FactorialTest.java")
  %>
  
  <div class="file-name">factorial/src/Factorial.java</div>
  <pre class="java sh_java"><%= CGI::escapeHTML(code['Factorial.java']) %></pre>
  
  <div class="file-name">factorial/test/FactorialTest.java</div>
  <pre class="java sh_java"><%= CGI::escapeHTML(code['FactorialTest.java']) %></pre>
  
  <%
    File.open("#{workdir}/factorial/src/Factorial.java", "wb") {|f| f.write(code['Factorial.java']) }
    File.open("#{workdir}/factorial/test/FactorialTest.java", "wb") {|f| f.write(code['FactorialTest.java']) }
  %>
  
  <p>
    At this point you'd normally solve the exercise yourself to make sure your testcases are good.
    Then you'd make <code>Factorial.java</code> a stub like above and commit and push your changes.
  </p>
  
  <%=
    shell_session.example do |sh|
      sh.run "git status"
      sh.blank_line
      sh.run "git add --verbose factorial"
      sh.blank_line
      sh.run "git commit -m \"Added factorial exercise.\""
      sh.blank_line
      sh.run "git push"
    end
  %>
  
  <p>
    The webapp won't react to changes in the repository before you 'refresh' the course.
    This may be inconvenient, but it also somewhat protects students from erroneus git pushes
    by undercaffeinated exercise authors.
  </p>
  
  <% page.visit(page.current_url) %>
  <% highlight('[value="Refresh from repository"]') %>
  <%= screenshot %>
  <% click_on 'Refresh from repository' %>
  <% course.reload %>
  
  <p>
    The system now reloads and all exercises from the repository and rebuilds its
    internal caches. Any submissions made to previous exercises will survive this process,
    even if the exercise is deleted in the push.
  </p>
  
  <%= screenshot %>
  
  <p>
    The exercise should now be available for download and accept submissions either
    from the webapp or from the NetBeans plugin.
  </p>
  
  
  <h2>Metadata files</h2>
  
  <p>
    TMC can be configured by placing certain YAML files in certain directories.
    This is used primarily to set deadlines for exercises.
  </p>
  
  <p>
    There are two kinds of configuration files:
  </p>
  
  <ul>
    <li><code>course_metadata.yml</code></li>
    <li><code>metadata.yml</code></li>
  </ul>
  
  <h3><code>course_metadata.yml</code></h3>
  
  <p>
    <code>course_metadata.yml</code> has to be in the root directory of the
    repository and may contain directives as in the following example:
  </p>
  
  <pre class="yaml">
hidden: true
hide_after: 2010-02-15</pre>
  
  <ul>
    <li><code>hidden</code> hides the course from students (and NetBeans)</li>
    <li><code>hide_after</code> hides the course after a given date from students (and NetBeans) and refuses to accept any more submissions</li>
  </ul>
  
  <h3><code>metadata.yml</code></h3>
  
  <p>
    <code>metadata.yml</code> may be in an exercise directory
    or any other directory, which will cause it to be applied to all
    exercises below that directory. You may specify defaults
    in a parent directory's <code>metadata.yml</code> and override them
    selectively in subdirectories.
  </p>
  
  <p>
    <code>metadata.yml</code> may contain directives as in the following example:
  </p>
  
  <pre class="yaml">
hidden: false
deadline: 2010-02-15
returnable: false</pre>
    <!--
    TODO: Not completely implemented:
    publish_date: nil
    gdocs_sheet: "root"
    -->
  
  <ul>
    <li><code>hidden</code> hides the exercise from students (and NetBeans)</li>
    <li><code>deadline</code> hides the exercise after a given date from students (and NetBeans) and refuses to accept any more submissions</li>
    <li>
      <code>returnable</code> tells whether to accept submissions for the
      exercise. By default if the exercise has a non-empty
      <code>test/</code> directory then it is considered returnable.
    </li>
  </ul>
  
  <h2>ProTips</h2>
  
  <ul>
    <li>
      Don't use a dash ("-") in exercise names. There is a bug related to
      that at the moment, because a dash is used to replace a slash ("/")
      when naming exercises that reside in subdirectories.
    </li>
    <li>
      The
      <a href="http://testmycode.dnsalias.com/edu-test-utils/javadoc/">edu-test-utils minilibrary</a>
      is quite useful (and included in the default exercise template).
      Currently it has a bunch of helpers for testing object-oriented code
      via reflection. Feel free to
      <a href="https://github.com/testmycode/edu-test-utils">contribute</a>.
    </li>
  </ul>
  
  
  <footer>
    This page was automatically generated from an acceptance test at <%= Time.now %>.
    <!-- How cool is that? -->
  </footer>
  
  <%
    # Clean up the fake remote repo
    FileUtils.rm_rf(repo_path)
  %>
</body>
</html>
